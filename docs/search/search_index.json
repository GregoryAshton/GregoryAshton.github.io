{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gregory Ashton About me I am a Teaching Fellow at Royal Holloway (University of London), a gravitational-wave astrophysicist, and member of the LIGO Scientific Collaboration . In 2016, I completed my PhD Timing variations in neutron stars: models, inference and their implications for gravitational waves at the University of Southampton under the joint supervision of Prof. David Ian Jones and Dr. Reinhard Prix (Albert Einstein Institute, Hannover). I then worked as a Postdoc in Hannover with Reinhard and others in the Continuous Gravitational Wave group , before moving to Melbourne to work with Paul Lasky in Monash University (Melbourne Australia). In 2020, I moved back to the UK and am currently teaching foundation year maths at Royal Holloway.","title":"Home"},{"location":"#gregory-ashton","text":"","title":"Gregory Ashton"},{"location":"#about-me","text":"I am a Teaching Fellow at Royal Holloway (University of London), a gravitational-wave astrophysicist, and member of the LIGO Scientific Collaboration . In 2016, I completed my PhD Timing variations in neutron stars: models, inference and their implications for gravitational waves at the University of Southampton under the joint supervision of Prof. David Ian Jones and Dr. Reinhard Prix (Albert Einstein Institute, Hannover). I then worked as a Postdoc in Hannover with Reinhard and others in the Continuous Gravitational Wave group , before moving to Melbourne to work with Paul Lasky in Monash University (Melbourne Australia). In 2020, I moved back to the UK and am currently teaching foundation year maths at Royal Holloway.","title":"About me"},{"location":"notes/","text":"Notes Under construction","title":"Notes"},{"location":"notes/#notes","text":"Under construction","title":"Notes"},{"location":"projects/","text":"Projects In this page, I collect various miscellaneous coding projects I have been involved in. Projects kookaburra A python package for profile-domain timing of radio pulsars bilby_pipe A python package for automating the job of running multiple jobs on LIGO Data Grid clusters. bilby A python package providing a user friendly interface to perform parameter estimation. It is primarily designed and built for inference of compact binary coalescence events in interferometric data, but it can also be used for more general problems. PyFstat A python package containing various methods to run continuous gravitational wave searches. Includes glitch-robust, MCMC-based, and transient work. Bayes Bimodal Test A simple python module using the emcee MCMC software to perform a Bayesian model comparison of bimodality. GitCheck : A python appindicator which provides a visual check of the status of git repos. This builds on some of the functionality of batchgit by Max Hebditch. GetTrainTimes : a command-line tool to quickly get train times from the national rail (UK) website. pyweather : a command-line tool to quickly get a visual (ASCII) forecast of the weather for (almost) any location. Using the Google maps API to study average driving speeds around the globe . To see the results have a look here Printing latex elements : This isn't so much a project as a useful script. Often in cleaning up latex docs I trawl through the document searching for occurances of say includegraphics . This script will simply print the elements (for example in \\label{eqn: an equation} the element would be eqn: an equation ) to the command line. It takes multiple files and if unspecified will search for proper tex files to use. It has default flags of -f to find figures and -l to find labels, but you can specify whatever you want with -o . For example $ print_tex_elements somearticle.tex -o cite might for example produce Einstein1916 Newton1675","title":"Projects"},{"location":"projects/#projects","text":"In this page, I collect various miscellaneous coding projects I have been involved in.","title":"Projects"},{"location":"projects/#projects_1","text":"kookaburra A python package for profile-domain timing of radio pulsars bilby_pipe A python package for automating the job of running multiple jobs on LIGO Data Grid clusters. bilby A python package providing a user friendly interface to perform parameter estimation. It is primarily designed and built for inference of compact binary coalescence events in interferometric data, but it can also be used for more general problems. PyFstat A python package containing various methods to run continuous gravitational wave searches. Includes glitch-robust, MCMC-based, and transient work. Bayes Bimodal Test A simple python module using the emcee MCMC software to perform a Bayesian model comparison of bimodality. GitCheck : A python appindicator which provides a visual check of the status of git repos. This builds on some of the functionality of batchgit by Max Hebditch. GetTrainTimes : a command-line tool to quickly get train times from the national rail (UK) website. pyweather : a command-line tool to quickly get a visual (ASCII) forecast of the weather for (almost) any location. Using the Google maps API to study average driving speeds around the globe . To see the results have a look here Printing latex elements : This isn't so much a project as a useful script. Often in cleaning up latex docs I trawl through the document searching for occurances of say includegraphics . This script will simply print the elements (for example in \\label{eqn: an equation} the element would be eqn: an equation ) to the command line. It takes multiple files and if unspecified will search for proper tex files to use. It has default flags of -f to find figures and -l to find labels, but you can specify whatever you want with -o . For example $ print_tex_elements somearticle.tex -o cite might for example produce Einstein1916 Newton1675","title":"Projects"},{"location":"science/","text":"Science Publications I maintain an ADS library of my publications in addition to the following list. Ashton, Gregory; Ackley, Kendall; Maga\u00f1a Hernandez, Ignacio; Piotrzkowski, Brandon Current observations are insufficient to confidently associate the binary black hole merger GW190521 with AGN J124942.3+344929 Xing-Jiang Zhu, Gregory Ashton Characterizing Astrophysical Binary Neutron Stars with Gravitational Waves Ashton, Gregory; Thrane, Eric The astrophysical odds of GW151216 Romero-Shaw, I. M.; Talbot, C.; Biscoveanu, S.; D'Emilio, V.; Ashton, G., et al. Bayesian inference for compact binary coalescences with BILBY: Validation and application to the first LIGO--Virgo gravitational-wave transient catalogue You, Zhi-Qiang; Zhu, Xing-Jiang; Ashton, Gregory; Thrane, Eric; Zhu, Zong-Hong Standard-siren cosmology using gravitational waves from binary black holes Sarin, Nikhil; Lasky, Paul D.; Ashton, Gregory Gravitational waves or deconfined quarks: what causes the premature collapse of neutron stars born in short gamma-ray bursts? Ashton, G.; Khan, S. Multi-waveform inference of gravitational waves Smith, Rory J. E.; Ashton, Gregory, Vajpeyi, Avi; Talbot, Colm Massively parallel Bayesian inference for transient gravitational-wave astronomy Ashton, Gregory; Thrane, Eric, Smith, Rory J. E. Gravitational wave detection without boot straps: a Bayesian approach Ashton, Gregory; Lasky, Paul D.; Graber, Vanessa; Palfreyman, Jim Rotational evolution of the Vela pulsar during the 2016 glitch Lasky, Paul D.; Sarin, Nikhil; Ashton, Greg Neutron Star Merger Remnants: Braking Indices, Gravitational Waves, and the Equation Of State Sarin, Nikhil; Lasky, Paul D.; Ashton, Greg X-ray afterglows of Short gamma-ray bursts: Magnetar or Fireball? Ashton, Gregory; Huebner, Moritz; Lasky, Paul D.; Talbot, Colm; et al. Bilby: A user-friendly Bayesian inference library for gravitational-wave astronomy Keitel, David; Ashton, Gregory Faster search for long gravitational-wave transients: GPU implementation of the transient F-statistic Ashton, Gregory; Prix, Reinhard; Jones, Ian A semicoherent glitch-robust continuous gravitational wave search N. Sarin, P.D. Lasky, L. Sammut, G. Ashton An X-ray guided gravitational-wave search for binary neutron star merger remnants (2018) G. Ashton, R. Prix, Hierarchical multi-stage MCMC follow-up of continuous gravitational wave candidates (2018) G. Ashton, D.I. Jones, and R. Prix Advances in our understanding of the free precession candidate PSR B1828-11 (2018) G. Ashton, E. Burns, T. Dal Canton, T. Dent, H.-B. Eggenstein, A. B. Nielsen, R. Prix, M. Was, S. J. Zhu Coincident detection significance in multimessenger astronomy G. Ashton, R. Prix, D. I. Jones Statistical characterization of pulsar glitches and their potential impact on searches for continuous gravitational waves D. I. Jones, G. Ashton G, R. Prix On the occurrence of glitches in pulsar free precession candidates G. Ashton, O. Birnholtz, M. Cabero, C. Capano, T. Dent, B. Krishnan, G. D. Meadors, A. B. Nielsen, A. Nitz, J. Westerweck Comments on: \"Echoes from the abyss: Evidence for Planck-scale structure at black hole horizons\" G. Ashton, D. I. Jones, R. Prix On the free-precession candidate PSR B1828-11: Evidence for increasing deformation G. Ashton PhD thesis: Timing variations in neutron stars: models, inference and their implications for gravitational waves A. Baker et al. Proposal of a micromagnetic standard problem for ferromagnetic resonance simulations (2016) G. Ashton, D. I. Jones, R. Prix Comparing models of the periodic variations in spin-down and beam-width for PSR B1828-11 (2016) G. Ashton, D. I. Jones, R. Prix The effect of timing noise on targeted and narrow-band coherent searches for continuous gravitational waves (2015) Misc. Nature Astronomy Community, Behind the Paper: Understanding the rotational evolution of the Vela pulsar during the 2016 glitch Institute of Physics, Gravitational Physics Group 2015 newsletter M. Franchin et al. Current driven nucleation of domain walls in cylindrical nanowires (2011) Selected Presentations GR22/Amaldi13 meeting, Valencia, Spain, July 2019: Gravitational Wave Detection: A Fully Bayesian Approach (contributed) IPTA annual meeting, Pune, India, June 2019: Internal neutron-star physics from the 2016 Vela glitch (contributed, remote) Astrophysics Colloquium, University of Melbourne, October 2018: Astrophysical inference and transient gravitational wave astronomy (invited) ASA Annual Scientific Meeting, Melbourne, Australia, June 2018: Multimessenger follow-up of continuous gravitational wave candidates (contributed) Australasian pulsar meeting, September 2018: Periodic modulations and a glitch in PSR B1828-11 (remote) Institute for Nuclear Theory Workshop INT-18-71W, Astro-Solids, Dense Matter, and Gravitational Waves (April 16 - 20, 2018): Continuous wave parameter estimation and non-standard signal follow up (invited) 11th Bonn workshop on Formation and Evolution of Neutron Stars, Bonn, Germany, December 2017: Neutron stars as continuous gravitational wave emitters Annual NewCompStar Conference , Istanbul, Turkey, 2016: Learning about neutron stars from pulsar precession observations (contributed, best student talk prize) Annual NewCompStar Conference , Budapest, Hungary 2015: Comparing different models of pulsar timing noise (contributed) BritGrav , Birmingham, UK, 2015: Applying Bayesian data analysis to learn about periodic variability in pulsars (contributed) BritGrav , Cambridge, UK, 2014: Gravitational wave searches from noisy neutron stars (contributed, runner up prize for best talk by IoP) Press Interview on Adelaide FiveAA to discuss GW190425, the second binary neutron star event observed by LIGO & Virgo Press for Nature Astronomy article \"Rotational evolution of the Vela pulsar during the 2016 glitch\": The Age: Patient astronomers crack the code of super-dense spinning stars CNET: Astronomers watched a neutron star 'glitch' and can't yet explain it The Register: Mysterious 'glitch' in neutron stars may be down to an itch under the body's surface ABC \"Your Afternoon\" Helen Shield interviews my excellent co-author Jim Palfreyman Phys.org Glitch in neutron star reveals its hidden secrets Astronomy: Astronomers catch a pulsar 'glitching,' offering insights into the strange stars Forbes: A Radio Glitch Reveals The Structure Of A Neutron Star Advocator: Neutron Star Anomaly Revealed More Details On These Mysterious Space Objects ZME Science: Peculiar pulsar slows down before \u2018glitching\u2019 Futarism: A NEUTRON STAR \u201cGLITCHED\u201d \u2014 AND SCIENTISTS NOTICED SOMETHING AMAZING Sci-News: Glitch in Vela Pulsar Provides Unique Opportunity to Study Neutron Star\u2019s Interior Science Daily: Glitch in neutron star reveals its hidden secrets Space.com: Weird Star Slows Down Before 'Glitching,' and No One Knows Why Science Alert: Astronomers Just Got Closer to Unravelling The Mystery of 'Glitching' Pulsars Live Science: Maybe Neutron Stars 'Glitch Out' So Much Because They're Full of Soup IFLS: A Glitch In A Neutron Star Allowed Astronomers To \"Peek\" At Its Interior Spektrum: Wenn Neutronensterne aus dem Takt geraten Physics World: Pulsar glitch suggests superfluid layers lie within neutron star SciShow News: August 16 update","title":"Science"},{"location":"science/#science","text":"","title":"Science"},{"location":"science/#publications","text":"I maintain an ADS library of my publications in addition to the following list. Ashton, Gregory; Ackley, Kendall; Maga\u00f1a Hernandez, Ignacio; Piotrzkowski, Brandon Current observations are insufficient to confidently associate the binary black hole merger GW190521 with AGN J124942.3+344929 Xing-Jiang Zhu, Gregory Ashton Characterizing Astrophysical Binary Neutron Stars with Gravitational Waves Ashton, Gregory; Thrane, Eric The astrophysical odds of GW151216 Romero-Shaw, I. M.; Talbot, C.; Biscoveanu, S.; D'Emilio, V.; Ashton, G., et al. Bayesian inference for compact binary coalescences with BILBY: Validation and application to the first LIGO--Virgo gravitational-wave transient catalogue You, Zhi-Qiang; Zhu, Xing-Jiang; Ashton, Gregory; Thrane, Eric; Zhu, Zong-Hong Standard-siren cosmology using gravitational waves from binary black holes Sarin, Nikhil; Lasky, Paul D.; Ashton, Gregory Gravitational waves or deconfined quarks: what causes the premature collapse of neutron stars born in short gamma-ray bursts? Ashton, G.; Khan, S. Multi-waveform inference of gravitational waves Smith, Rory J. E.; Ashton, Gregory, Vajpeyi, Avi; Talbot, Colm Massively parallel Bayesian inference for transient gravitational-wave astronomy Ashton, Gregory; Thrane, Eric, Smith, Rory J. E. Gravitational wave detection without boot straps: a Bayesian approach Ashton, Gregory; Lasky, Paul D.; Graber, Vanessa; Palfreyman, Jim Rotational evolution of the Vela pulsar during the 2016 glitch Lasky, Paul D.; Sarin, Nikhil; Ashton, Greg Neutron Star Merger Remnants: Braking Indices, Gravitational Waves, and the Equation Of State Sarin, Nikhil; Lasky, Paul D.; Ashton, Greg X-ray afterglows of Short gamma-ray bursts: Magnetar or Fireball? Ashton, Gregory; Huebner, Moritz; Lasky, Paul D.; Talbot, Colm; et al. Bilby: A user-friendly Bayesian inference library for gravitational-wave astronomy Keitel, David; Ashton, Gregory Faster search for long gravitational-wave transients: GPU implementation of the transient F-statistic Ashton, Gregory; Prix, Reinhard; Jones, Ian A semicoherent glitch-robust continuous gravitational wave search N. Sarin, P.D. Lasky, L. Sammut, G. Ashton An X-ray guided gravitational-wave search for binary neutron star merger remnants (2018) G. Ashton, R. Prix, Hierarchical multi-stage MCMC follow-up of continuous gravitational wave candidates (2018) G. Ashton, D.I. Jones, and R. Prix Advances in our understanding of the free precession candidate PSR B1828-11 (2018) G. Ashton, E. Burns, T. Dal Canton, T. Dent, H.-B. Eggenstein, A. B. Nielsen, R. Prix, M. Was, S. J. Zhu Coincident detection significance in multimessenger astronomy G. Ashton, R. Prix, D. I. Jones Statistical characterization of pulsar glitches and their potential impact on searches for continuous gravitational waves D. I. Jones, G. Ashton G, R. Prix On the occurrence of glitches in pulsar free precession candidates G. Ashton, O. Birnholtz, M. Cabero, C. Capano, T. Dent, B. Krishnan, G. D. Meadors, A. B. Nielsen, A. Nitz, J. Westerweck Comments on: \"Echoes from the abyss: Evidence for Planck-scale structure at black hole horizons\" G. Ashton, D. I. Jones, R. Prix On the free-precession candidate PSR B1828-11: Evidence for increasing deformation G. Ashton PhD thesis: Timing variations in neutron stars: models, inference and their implications for gravitational waves A. Baker et al. Proposal of a micromagnetic standard problem for ferromagnetic resonance simulations (2016) G. Ashton, D. I. Jones, R. Prix Comparing models of the periodic variations in spin-down and beam-width for PSR B1828-11 (2016) G. Ashton, D. I. Jones, R. Prix The effect of timing noise on targeted and narrow-band coherent searches for continuous gravitational waves (2015)","title":"Publications"},{"location":"science/#misc","text":"Nature Astronomy Community, Behind the Paper: Understanding the rotational evolution of the Vela pulsar during the 2016 glitch Institute of Physics, Gravitational Physics Group 2015 newsletter M. Franchin et al. Current driven nucleation of domain walls in cylindrical nanowires (2011)","title":"Misc."},{"location":"science/#selected-presentations","text":"GR22/Amaldi13 meeting, Valencia, Spain, July 2019: Gravitational Wave Detection: A Fully Bayesian Approach (contributed) IPTA annual meeting, Pune, India, June 2019: Internal neutron-star physics from the 2016 Vela glitch (contributed, remote) Astrophysics Colloquium, University of Melbourne, October 2018: Astrophysical inference and transient gravitational wave astronomy (invited) ASA Annual Scientific Meeting, Melbourne, Australia, June 2018: Multimessenger follow-up of continuous gravitational wave candidates (contributed) Australasian pulsar meeting, September 2018: Periodic modulations and a glitch in PSR B1828-11 (remote) Institute for Nuclear Theory Workshop INT-18-71W, Astro-Solids, Dense Matter, and Gravitational Waves (April 16 - 20, 2018): Continuous wave parameter estimation and non-standard signal follow up (invited) 11th Bonn workshop on Formation and Evolution of Neutron Stars, Bonn, Germany, December 2017: Neutron stars as continuous gravitational wave emitters Annual NewCompStar Conference , Istanbul, Turkey, 2016: Learning about neutron stars from pulsar precession observations (contributed, best student talk prize) Annual NewCompStar Conference , Budapest, Hungary 2015: Comparing different models of pulsar timing noise (contributed) BritGrav , Birmingham, UK, 2015: Applying Bayesian data analysis to learn about periodic variability in pulsars (contributed) BritGrav , Cambridge, UK, 2014: Gravitational wave searches from noisy neutron stars (contributed, runner up prize for best talk by IoP)","title":"Selected Presentations"},{"location":"science/#press","text":"Interview on Adelaide FiveAA to discuss GW190425, the second binary neutron star event observed by LIGO & Virgo Press for Nature Astronomy article \"Rotational evolution of the Vela pulsar during the 2016 glitch\": The Age: Patient astronomers crack the code of super-dense spinning stars CNET: Astronomers watched a neutron star 'glitch' and can't yet explain it The Register: Mysterious 'glitch' in neutron stars may be down to an itch under the body's surface ABC \"Your Afternoon\" Helen Shield interviews my excellent co-author Jim Palfreyman Phys.org Glitch in neutron star reveals its hidden secrets Astronomy: Astronomers catch a pulsar 'glitching,' offering insights into the strange stars Forbes: A Radio Glitch Reveals The Structure Of A Neutron Star Advocator: Neutron Star Anomaly Revealed More Details On These Mysterious Space Objects ZME Science: Peculiar pulsar slows down before \u2018glitching\u2019 Futarism: A NEUTRON STAR \u201cGLITCHED\u201d \u2014 AND SCIENTISTS NOTICED SOMETHING AMAZING Sci-News: Glitch in Vela Pulsar Provides Unique Opportunity to Study Neutron Star\u2019s Interior Science Daily: Glitch in neutron star reveals its hidden secrets Space.com: Weird Star Slows Down Before 'Glitching,' and No One Knows Why Science Alert: Astronomers Just Got Closer to Unravelling The Mystery of 'Glitching' Pulsars Live Science: Maybe Neutron Stars 'Glitch Out' So Much Because They're Full of Soup IFLS: A Glitch In A Neutron Star Allowed Astronomers To \"Peek\" At Its Interior Spektrum: Wenn Neutronensterne aus dem Takt geraten Physics World: Pulsar glitch suggests superfluid layers lie within neutron star SciShow News: August 16 update","title":"Press"},{"location":"notes/Cleaning-up-a-messy-latex-figures-directory/","text":"Example: you have worked on a project for a few weeks/months/years and over that time you have changed which figures are used. This generally leaves a trail of unused files which now you want to remove. The simple answer is to find all occurances of includegraphics and check if it exists in your image collection (for me I use ./img ), then delete the rest. Here we will provide some tools to faciliatet this. Firstly we define what we want to find is the figurename.png in: \\begin{figure} \\centering \\includegraphics[]{figurename.png} \\caption{} \\label{} \\end{figure} Getting the figures used in the latex file This can be as simple as first grep for lines with figrues in them, then pipe the output into another grep matching only the contents of the {} paranthesis`. This method was inspired by this SO post and takes the form: grep \"includegraphics\" *.tex | grep -oP \"\\{\\K[^}]+\" For our nice example above, this will produce figurename.png as expected. Unfortunately life isn't ever simple and we often split the filename over two lines. This neccesitates a more involved approach. I personally found it easier to write a simple python script which follows the following logic: find includegraphics , then find and print the inside of the next set of paranthesis. For example something like {% highlight python %} !/usr/bin/python \"\"\" Find figs based on includegraphics in tex docs and prints the file names\"\"\" import sys filename = sys.argv[1] with open(filename, \"r\") as f: lines = f.read() parts = lines.split(\"includegraphics\") files = [] for p in parts[1:]: files.append(p[1+p.find(\"{\"): p.find(\"}\")]) files = sorted(files, key=lambda s: s.lower()) for f in files: print f I will assume now this is saved in an exuctable print_tex_figs which takes as it's only argument the tex file of interest. Diff the figures in the file, with the image directory Now all we need to do is a simple diff: vimdiff <(print_text_flags somefile.tex) <(ls -1 img/) Note we use the -1 flag to ensure that ls prints one file per line. This will give a vimdiff view of the files in the tex file, and those existing in the image. In theory you could automate deleting the unused files, but this is generally a bad idea as there is no garuntee that these files aren't used in some other way.","title":"Cleaning up a messy latex figures directory"},{"location":"notes/Cleaning-up-a-messy-latex-figures-directory/#getting-the-figures-used-in-the-latex-file","text":"This can be as simple as first grep for lines with figrues in them, then pipe the output into another grep matching only the contents of the {} paranthesis`. This method was inspired by this SO post and takes the form: grep \"includegraphics\" *.tex | grep -oP \"\\{\\K[^}]+\" For our nice example above, this will produce figurename.png as expected. Unfortunately life isn't ever simple and we often split the filename over two lines. This neccesitates a more involved approach. I personally found it easier to write a simple python script which follows the following logic: find includegraphics , then find and print the inside of the next set of paranthesis. For example something like {% highlight python %}","title":"Getting the figures used in the latex file"},{"location":"notes/Cleaning-up-a-messy-latex-figures-directory/#usrbinpython","text":"\"\"\" Find figs based on includegraphics in tex docs and prints the file names\"\"\" import sys filename = sys.argv[1] with open(filename, \"r\") as f: lines = f.read() parts = lines.split(\"includegraphics\") files = [] for p in parts[1:]: files.append(p[1+p.find(\"{\"): p.find(\"}\")]) files = sorted(files, key=lambda s: s.lower()) for f in files: print f I will assume now this is saved in an exuctable print_tex_figs which takes as it's only argument the tex file of interest.","title":"!/usr/bin/python"},{"location":"notes/Cleaning-up-a-messy-latex-figures-directory/#diff-the-figures-in-the-file-with-the-image-directory","text":"Now all we need to do is a simple diff: vimdiff <(print_text_flags somefile.tex) <(ls -1 img/) Note we use the -1 flag to ensure that ls prints one file per line. This will give a vimdiff view of the files in the tex file, and those existing in the image. In theory you could automate deleting the unused files, but this is generally a bad idea as there is no garuntee that these files aren't used in some other way.","title":"Diff the figures in the file, with the image directory"},{"location":"notes/Fedora-firewall-settings/","text":"Fedora Setup I experienced issues connecting to various networks and vpn's when using Fedora 21. This was fixed by advise from ask.fedoraproject . I will repeat the fix here since I suspect I may run into this error again and I have a terrible memory! $ ll-cmd --direct --add-rule ipv4 filter INPUT 0 -p gre -j ACCEPT $ firewall-cmd --direct --add-rule ipv6 filter INPUT 0 -p gre -j ACCEPT $ firewall-cmd --reload","title":"Fedora firewall settings"},{"location":"notes/Some-useful-latex-helper-tools/","text":"In this post I will descrive, mostly so I can recall in future, how a script I wrote operates. The script, print-tex-elements can be found here and can be used to pull out useful information from a .tex file. Firstly, put this file somewhere on your PYTHONPATH , I keep a Scripts directory for such single-use scripts. Now for some example usage: Print all the labels Calling {% highlight bash %} print-tex-elements -l prints all of the latex labels. Print a subset of the labels If you use keys to distinguish the type of labels e.g. {% highlight latex %} \\label{eqn: equation number one} then we can just print the equation labels by giving eqn as the argument. For example: {% highlight bash %} print-tex-elements -l fig Printing label elements in test.tex: 305 -> fig: template jumps 474 -> fig: narrow-band example 544 -> fig: conv 605 -> fig: sliding window 663 -> fig: mismatch Tobs 663 -> fig: mismatch Tobs Note that the repeated label here would be underlined, I just can't work out how to show this. The numbers give the line number of the first occurance. Print all the figures We can print the figure names using {% highlight bash %} print-tex-elements -f Printing includegraphics elements in test.tex: 329 -> template_jumps 489 -> narrow-band_examples 556 -> S5_conv_mismatch 619 -> sliding_window 669 -> Crab_mismatch_Tobs Print all the citations We can print the citation keys {% highlight bash %} print-tex-elements -c For citations, repeated citations are removed. and","title":"Some useful latex helper tools"},{"location":"notes/Some-useful-latex-helper-tools/#print-all-the-labels","text":"Calling {% highlight bash %} print-tex-elements -l prints all of the latex labels.","title":"Print all the labels"},{"location":"notes/Some-useful-latex-helper-tools/#print-a-subset-of-the-labels","text":"If you use keys to distinguish the type of labels e.g. {% highlight latex %} \\label{eqn: equation number one} then we can just print the equation labels by giving eqn as the argument. For example: {% highlight bash %} print-tex-elements -l fig Printing label elements in test.tex: 305 -> fig: template jumps 474 -> fig: narrow-band example 544 -> fig: conv 605 -> fig: sliding window 663 -> fig: mismatch Tobs 663 -> fig: mismatch Tobs Note that the repeated label here would be underlined, I just can't work out how to show this. The numbers give the line number of the first occurance.","title":"Print a subset of the labels"},{"location":"notes/Some-useful-latex-helper-tools/#print-all-the-figures","text":"We can print the figure names using {% highlight bash %} print-tex-elements -f Printing includegraphics elements in test.tex: 329 -> template_jumps 489 -> narrow-band_examples 556 -> S5_conv_mismatch 619 -> sliding_window 669 -> Crab_mismatch_Tobs","title":"Print all the figures"},{"location":"notes/Some-useful-latex-helper-tools/#print-all-the-citations","text":"We can print the citation keys {% highlight bash %} print-tex-elements -c For citations, repeated citations are removed. and","title":"Print all the citations"},{"location":"notes/Tips-for-speeding-up-new-system-setup/","text":"Installing a new OS can be fun and exciting, I often like to try out the new features and switch a few times a year. However setting up the new system with all the software and git projects that you were working on can be quite a pain. In this post I will describe an easy way to bootstrap your git projects using Max Hebditch's batchgit script. To begin, we have an old system which has several git repositories, for example perhaps it has something like {% highlight bash %} /home/greg/project1 /home/greg/Programs/project2 and these are backed up on github or bitbucket . Then there is a new system, which we want to generate clones of these repo's. On the old system Firstly we begin by heading to the batchgit repo and cloning it. Once cloned, you need to add the directory to your bash PATH variable, or alternatively always call it from wherever it is cloned. Either way, you can then simply call batchgit which will walk you through the setup. Once complete, you will find a file ~/,batchgitrc which looks like {% highlight bash %} /home/greg/project1 /home/greg/Programs/project2 Alternatively, you could just write this yourself and then run batchgit -s , which, if you have all the paths correct, will print a summary of the status of each repo. Having setup batchgit, we can then use its bootstrap feature (also described in the repo). Essentially we run {% highlight bash %} batchgit -b which produces a directory ~/batchgit-takeaway . On the new system On the new system, copy the directory ~/batchgit-takeaway from the old system, for example using scp : {% highlight bash %} scp -r hostname@ipaddress:/path/to/batchgit-takeaway . Now, before we attempt to clone repo's using batchgit , firstly check that you have git installed, you have updated the ssh-keys on github/bitbucket, and that the batchgit script is on your new systems bash PATH . Once you have done these steps, you can proceed to run {% highlight bash %} batchgit -n This will walk you through asking which repo's your wish to be cloned and makes sure that things go in the correct directory. Once complete, your new system should contain all your old repo's. Thanks very much to Max for developing this, it has saved me a few minutes going around and copying url 's from github.","title":"Tips for speeding up new system setup"},{"location":"notes/Tips-for-speeding-up-new-system-setup/#on-the-old-system","text":"Firstly we begin by heading to the batchgit repo and cloning it. Once cloned, you need to add the directory to your bash PATH variable, or alternatively always call it from wherever it is cloned. Either way, you can then simply call batchgit which will walk you through the setup. Once complete, you will find a file ~/,batchgitrc which looks like {% highlight bash %} /home/greg/project1 /home/greg/Programs/project2 Alternatively, you could just write this yourself and then run batchgit -s , which, if you have all the paths correct, will print a summary of the status of each repo. Having setup batchgit, we can then use its bootstrap feature (also described in the repo). Essentially we run {% highlight bash %} batchgit -b which produces a directory ~/batchgit-takeaway .","title":"On the old system"},{"location":"notes/Tips-for-speeding-up-new-system-setup/#on-the-new-system","text":"On the new system, copy the directory ~/batchgit-takeaway from the old system, for example using scp : {% highlight bash %} scp -r hostname@ipaddress:/path/to/batchgit-takeaway . Now, before we attempt to clone repo's using batchgit , firstly check that you have git installed, you have updated the ssh-keys on github/bitbucket, and that the batchgit script is on your new systems bash PATH . Once you have done these steps, you can proceed to run {% highlight bash %} batchgit -n This will walk you through asking which repo's your wish to be cloned and makes sure that things go in the correct directory. Once complete, your new system should contain all your old repo's. Thanks very much to Max for developing this, it has saved me a few minutes going around and copying url 's from github.","title":"On the new system"},{"location":"notes/ipython-nbconvert-latex-template-to-hide-code/","text":"In this work I will detail a method to produce a latex pdf from an ipython notebook and selectively hide the code. This was explained to me at the Next-Generation Computational Workshop Summer academy hosted by the University of Southampton in June 2015. In particular thanks to Min RK and Ian Hawke for help. The materials for the course were hosted here and a this is a particuarly useful notebook which detailed the exersize prompting this work. The basic idea is to create a template used by the converter, for more information about the templates see Jinja2 documentation . This template instructs the converter to selectively hide code cells. The template Create a file called hidecode.tplx containing: ((*- extends 'article.tplx' -*)) ((* block input_group *)) ((*- if cell.metadata.get('nbconvert', {}).get('show_code', False) -*)) ((( super() ))) ((*- endif -*)) ((* endblock input_group *)) Now if this template exists in the local directory of the notebook that you wish to convert we can simply operate with $ ipython nbconvert --to pdf --template hidecode Example.ipynb Adding the template to a default path If you intend to use the converter from multiple locations then instead of porting a copy of this to each place (providing an absolute path should work, but I have not had success) we can place it in a default location and instruct the converter to search there for templates. We will be editing the ipython profile: to find which one you are using you can run $ ipython profile locate Usually this will produce /home/user/.ipython/profile_default If not you can populate a profile with ipython profile create . The general gist is to create or edit the file /path/to/profile/ipython_nbconvert_ config.py with the following lines: c = get_config() c.LatexExporter.template_path = ['.', \"/home/user/.ipython\"] Both lines will exist if you autopopulated the profile, but the second you will need to remove the comment and add the second element of the list: this is were we will place the file hidecode.tplx . Once you have placed hidecode.tplx in the directory corresponding to the second element of the aforementioned list, then we can simply run: $ ipython nbconvert --to pdf --template hidecode Example.ipynb From any directory and it will find the hidecode template. Using the template The template allows you to select which code blocks to display. By default all code-blocks are hidden, to show one change the meta-data to { \"nbconvert\": { \"show_code\": true }, } a value of false or no value will result in the code being hidden when producing a pdf.","title":"ipython nbconvert latex template to hide code"},{"location":"notes/ipython-nbconvert-latex-template-to-hide-code/#the-template","text":"Create a file called hidecode.tplx containing: ((*- extends 'article.tplx' -*)) ((* block input_group *)) ((*- if cell.metadata.get('nbconvert', {}).get('show_code', False) -*)) ((( super() ))) ((*- endif -*)) ((* endblock input_group *)) Now if this template exists in the local directory of the notebook that you wish to convert we can simply operate with $ ipython nbconvert --to pdf --template hidecode Example.ipynb","title":"The template"},{"location":"notes/ipython-nbconvert-latex-template-to-hide-code/#adding-the-template-to-a-default-path","text":"If you intend to use the converter from multiple locations then instead of porting a copy of this to each place (providing an absolute path should work, but I have not had success) we can place it in a default location and instruct the converter to search there for templates. We will be editing the ipython profile: to find which one you are using you can run $ ipython profile locate Usually this will produce /home/user/.ipython/profile_default If not you can populate a profile with ipython profile create . The general gist is to create or edit the file /path/to/profile/ipython_nbconvert_ config.py with the following lines: c = get_config() c.LatexExporter.template_path = ['.', \"/home/user/.ipython\"] Both lines will exist if you autopopulated the profile, but the second you will need to remove the comment and add the second element of the list: this is were we will place the file hidecode.tplx . Once you have placed hidecode.tplx in the directory corresponding to the second element of the aforementioned list, then we can simply run: $ ipython nbconvert --to pdf --template hidecode Example.ipynb From any directory and it will find the hidecode template.","title":"Adding the template to a default path"},{"location":"notes/ipython-nbconvert-latex-template-to-hide-code/#using-the-template","text":"The template allows you to select which code blocks to display. By default all code-blocks are hidden, to show one change the meta-data to { \"nbconvert\": { \"show_code\": true }, } a value of false or no value will result in the code being hidden when producing a pdf.","title":"Using the template"},{"location":"notes/ipython-notebook-new-window/","text":"Using Google chrome on Ubuntu 14.04, by default the command $ ipython notebook will open a notebook server in any existing chrome instance. This can be a pain if you work across several workspaces. Instead, we can tell ipython to always open in a new window so you don't have to trawl through your workspaces to locate the new notebook server. To do this first locate the default profile: $ ipython profile locate In this directory will be a file ipython_notebook_config.py ; if this does not exist then run ipython profile create to generate the default configuration files. This file specifies all the configuration settings on starting up any notebooks, for more details see the docs Open up ipython_notebook_config.py and add the line c.NotebookApp.browser = u'/usr/bin/google-chrome %s --new-window' New notebook instances will now generate a new browser window.","title":"ipython notebook new window"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/","text":"Like many people I frequently work on the same project on several computers. This usually results in frequent use of ssh when I forget to commit changes on git, or don't have all the correct software on one computer. Since I don't have a static ip I have been using Dropbox to keep track of the address and then update aliases manually. Today I decided to automate the process and as I know I will forget how I did it, I will record the process here for myself in the future. Python script Firstly we need a script which saves an the address as a useful alias: !/usr/bin/python import subprocess import os Read in the ipaddress, hostname and username command_line = \"/sbin/ifconfig eth0 | grep 'inet addr:' | cut -d: -f2| awk '{print $1}'\" ipaddress = subprocess.check_output(command_line, shell=True).rstrip(\"\\n\") hostname = subprocess.check_output(\"hostname\", shell=True).rstrip(\"\\n\") user = subprocess.check_output(\"/usr/bin/whoami\", shell=True).rstrip(\"\\n\") Save results in a dictionary data = {} Save aliases in a file dir_of_script = os.path.dirname(os.path.realpath( file )) alias_file = \"ssh-aliases\" alias_file = dir_of_script+\"/\"+alias_file If file exists read in data try: with open(alias_file, \"r\") as file: for line in file: [alias, syscall] = line.split(\"=\") data[alias.lstrip(\"alias \")] = syscall.lstrip(\"'ssh -X \").rstrip(\"'\\n\").split(\"@\") data[hostname] = [user, ipaddress] except IOError: data = {hostname : [user, ipaddress]} Write to the file with open(alias_file, \"w+\") as file: for key, val in data.iteritems(): file.write(\"alias {}='ssh -X {}@{}'\\n\".format(key, val[0], val[1])) When run, this will save a file in the current directory ssh-aliases containing an aliases to access the current machine. If a previous entry existed and the ip address has changed then the alias file will be updated. Dropbox A simple way to share these aliases between several computers is to use Dropbox. Save the script above as saveIP.py in a directory eyeP of your Dropbox folder. Crontab Now we need to ask each computer to automatically run this python script at startup. This can be achieved by adding a crontab job. First run crontab -e If this is the first time you have run crontab it will ask you which editor to use. When in doubt, choose the default. Then add the line @reboot sleep 60 && python ~/Dropbox/eyeP/saveIP.py editing the path as appropriate. Note that the cronjob sleeps for a minute first, this avoids issues where the ipaddress and username come up blank. I don't know what causes them, but this seems a sensible work around. Edit profile Finally we just need to edit ~./bashrc on any computer that we want to use these aliases on. Simply add the line source ~/Dropbox/eyeP/ssh-aliases and after reloading the profile ( $ bash ), you should be able to use the aliases. For now this script simply sets these aliases by the computers host-name which can be checked by running $ hostname . Obviously this may cause conflicts if you have the same host-name on two computers.","title":"setup automatic ssh aliases over dropbox"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#python-script","text":"Firstly we need a script which saves an the address as a useful alias:","title":"Python script"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#usrbinpython","text":"import subprocess import os","title":"!/usr/bin/python"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#read-in-the-ipaddress-hostname-and-username","text":"command_line = \"/sbin/ifconfig eth0 | grep 'inet addr:' | cut -d: -f2| awk '{print $1}'\" ipaddress = subprocess.check_output(command_line, shell=True).rstrip(\"\\n\") hostname = subprocess.check_output(\"hostname\", shell=True).rstrip(\"\\n\") user = subprocess.check_output(\"/usr/bin/whoami\", shell=True).rstrip(\"\\n\")","title":"Read in the ipaddress, hostname and username"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#save-results-in-a-dictionary","text":"data = {}","title":"Save results in a dictionary"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#save-aliases-in-a-file","text":"dir_of_script = os.path.dirname(os.path.realpath( file )) alias_file = \"ssh-aliases\" alias_file = dir_of_script+\"/\"+alias_file","title":"Save aliases in a file"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#if-file-exists-read-in-data","text":"try: with open(alias_file, \"r\") as file: for line in file: [alias, syscall] = line.split(\"=\") data[alias.lstrip(\"alias \")] = syscall.lstrip(\"'ssh -X \").rstrip(\"'\\n\").split(\"@\") data[hostname] = [user, ipaddress] except IOError: data = {hostname : [user, ipaddress]}","title":"If file exists read in data"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#write-to-the-file","text":"with open(alias_file, \"w+\") as file: for key, val in data.iteritems(): file.write(\"alias {}='ssh -X {}@{}'\\n\".format(key, val[0], val[1])) When run, this will save a file in the current directory ssh-aliases containing an aliases to access the current machine. If a previous entry existed and the ip address has changed then the alias file will be updated.","title":"Write to the file"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#dropbox","text":"A simple way to share these aliases between several computers is to use Dropbox. Save the script above as saveIP.py in a directory eyeP of your Dropbox folder.","title":"Dropbox"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#crontab","text":"Now we need to ask each computer to automatically run this python script at startup. This can be achieved by adding a crontab job. First run crontab -e If this is the first time you have run crontab it will ask you which editor to use. When in doubt, choose the default. Then add the line @reboot sleep 60 && python ~/Dropbox/eyeP/saveIP.py editing the path as appropriate. Note that the cronjob sleeps for a minute first, this avoids issues where the ipaddress and username come up blank. I don't know what causes them, but this seems a sensible work around.","title":"Crontab"},{"location":"notes/setup-automatic-ssh-aliases-over-dropbox/#edit-profile","text":"Finally we just need to edit ~./bashrc on any computer that we want to use these aliases on. Simply add the line source ~/Dropbox/eyeP/ssh-aliases and after reloading the profile ( $ bash ), you should be able to use the aliases. For now this script simply sets these aliases by the computers host-name which can be checked by running $ hostname . Obviously this may cause conflicts if you have the same host-name on two computers.","title":"Edit profile"}]}